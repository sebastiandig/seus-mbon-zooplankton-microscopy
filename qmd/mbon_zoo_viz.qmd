---
title: "MBON Zooplankton Quick Visual"
author: 
  - Sebastian Di Geronimo
  - Tylar Murray
date: 2025-02-14
format: html
editor: source
---

# 1.0 ---- Summary of Document ----

This is a reproduced examples from *google colab* by Tylar

# 2.0 ---- Setup ----


## 2.1 Load Libraries

```{r setup}
#| include: FALSE
if (!nzchar(system.file(package = "librarian"))) 
  install.packages("librarian")

librarian::shelf(
  quiet = TRUE,
  librarian, conflicted, ggplot2, tibble, tidyr, readr, purrr, dplyr, stringr,
  forcats, lubridate, glue, fs, magrittr, here,
  
  # additional
  prismatic, skimr
)

conflicts_prefer(
  dplyr::filter(), 
  dplyr::select()
  )
```


## 2.2 Taxa Name Function
This function will help select the lowest taxonomic name, that depends on the 
level set in `const`

```{r taxa-func}
taxa_func <- function(..., incld_lvl = TRUE) {
  dat <- c(...) # combine all names into a vector
  taxa_name <- NA
  # loop through all names to select the lowest name
  for (i in seq(length(dat))) {
    if (is.na(taxa_name)) {
      taxa_name <- dat[i]
    }
  }
  if (incld_lvl) {
    taxa_name <- glue("{taxa_name} ({names(taxa_name)})")
  }
  return(taxa_name)
}
```

# 3.0 Load Dataset

```{r load-file}
#| code-summary: load file
dat <- 
  # here("data", "zoo_data_pre_obis_merg.csv") %>%
  rstudioapi::selectFile() %>%
  read_csv(show_col_types = FALSE) %T>% 
  print()

skimr::skim_tee(dat)

# select columns
dat <- 
  dat %>%
  filter(str_detect(site, "MR|LK|WS")) %>%
  select(
    cruise_id,
    station, site, 
    mesh,
    date_time, date, time_gmt,
    lat_in, lon_in,
    maximumDepthInMeters,
    volume_filt_cubic_m,
    taxa, scientificname, lifeStage, ind_m3, number_ind_sample,
    kingdom:genus
  ) %>%
  mutate(
    .after     = date,
    year       = year(date_time), 
    date_month = ym(format(date, "%Y-%m"))
    ) %>%
  # forces the month to be the same month as the start of the cruise
  # - only occurs if a cruise overlaps 2 different months (i.e. April into May)
  mutate(
    .by = cruise_id,
    date_month = min(date_month, na.rm = TRUE)
  ) %T>% 
  print()
```
## 3.1 Print Information

Information for station and site names, mesh sizes and life stages
```{r print-info}
#| echo: false
print(paste("stations:", paste(unique(dat$station), collapse = ", ")))
print(paste("stations:", paste(unique(dat$site), collapse = ", ")))
print(paste("mesh sizes available: ", paste(unique(dat$mesh), collapse = ", ")))
print(paste("life stages:", paste(unique(dat$lifeStage), collapse = ", ")))

dat_nest <- 
  dat %>%
  nest(data = c(taxa:last_col()))

count(dat_nest, station, site)
count(dat_nest, station, site, mesh)
count(dat_nest, station, site, mesh, date_month)
 
```
# 4.0 Set Constants

Set the lowest taxonomic level for plotting
Select the mesh size
Select the station

Options:
  - taxa_lvl:
    - kingdom
    - phylum 
    - class 
    - order 
    - family
    - genus
    - scientificname
    
  - mesh:
    - 200
    - 500 
    - 64 (<4 samples)
  
  - site:
    - MR
    - LK
    - WS
    - 9B (2 samples)
    - 57 (2 samples)

```{r constants}
#| echo: false
const <- list(
  taxa_lvl = "class", # lowest taxa level
  mesh     = 200,      # mesh size
  site     = "WS"      # site
)

# order of taxonomic classification
taxa_tree <- 
  c("kingdom", "phylum", "class", "order", "family", "genus", "scientificname") %>%
  rev()

# set lowest level
const$taxa_lvl <- taxa_tree[which(taxa_tree == const$taxa_lvl):length(taxa_tree)]

const
```


# 5.0 Filter Data

Filter data based on the constants from the previous chunk
This will also only select the "adult" stages (i.e. NA in lifeStage)

```{r filter-data}
#| echo: false
dat_filtered <-
  dat %>%
  filter(
    str_detect(site, const$site) # site
    & mesh == const$mesh         # mesh size
    & is.na(lifeStage)           # assumed na is adult
  ) %>% 
  mutate(
    # select the lowest taxa name available
    taxa_level = pmap(
      across(c(const$taxa_lvl)),
      incld_lvl = FALSE,
      taxa_func
    ),
  ) %>%
  unnest(taxa_level) %T>%
  print() 
```


# 6.0 Plot Data


## 6.1 Plot the Ind/m^3 based on Year

Either sum or mean

```{r plot-barchart-yearly}
#| echo: false
# === Iterate over unique stations and create stacked bar charts
dat_filtered %>%
  summarise(
    .by = c(taxa_level, site, year),
    # ind_m3 = mean(ind_m3),
    ind_m3 = sum(ind_m3),
    
  ) %>%
  mutate(
    taxa_level = fct_reorder(taxa_level, ind_m3, .fun = max)
  ) %>%
  ggplot(
    aes(x = year, y = ind_m3, fill = taxa_level,
    color = after_scale(prismatic::clr_darken(fill, 0.3))
        ),
    ) +
  geom_col() +
  labs(
    y = NULL,
    x = "Year",
    fill  = "Taxa Name",
    title = glue("`{const$taxa_lvl[1]}` for Year for Station {const$site} (mesh size {const$mesh})")
  ) +
  scale_y_continuous(expand = c(0, 0)) +
  scale_fill_viridis_d(option = "A") +
  guides(fill = guide_legend(ncol = 2, byrow = TRUE)) +
  theme_classic() +
  theme(
    legend.box.background = element_rect(color = "grey")
  )
```

## 6.2 Plot the Ind/m^3 based on Month and Year

Either sum or mean
```{r plot-barchart-months}
#| echo: false
dat_filtered %>%
    summarise(
    .by = c(site, year, date_month, taxa_level),
    # ind_m3 = mean(ind_m3)
    ind_m3 = sum(ind_m3)
  ) %>%
  mutate(
    .by     = c(site, date_month),
    total   = sum(ind_m3),
    percent = ind_m3 / total
  ) %>%
  mutate(
    taxa_level = fct_reorder(taxa_level, percent, .fun = max),
    date_month2 = fct_reorder(format(date_month, "%b %Y"), date_month)
  ) %>%
  ggplot(
    aes(x = date_month2, y = ind_m3, fill = taxa_level, 
        color = after_scale(prismatic::clr_darken(fill, 0.3))
        )
         ) +
  geom_col() +
  labs(
    y = NULL,
    x = "Year",
    fill  = "Taxa Name",
    title = glue("`{const$taxa_lvl[1]}` for Year for Station {const$site} (mesh size {const$mesh})")
  ) +
  scale_y_continuous(
    expand = c(0, 0)
  ) +
  scale_fill_viridis_d(option = "A") +
  guides(fill = guide_legend(ncol = 2, byrow = TRUE)) +
  theme_classic() +
  theme(
    legend.box.background = element_rect(color = "grey"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )
```

## 6.2 Plot the Percent (%) Ind/m^3 based on Month and Year 

Either sum or mean

```{r plot-barchart-percent}
#| echo: false
dat_filtered %>%
    summarise(
    .by = c(site, year, date_month, taxa_level),
    # ind_m3 = mean(ind_m3)
    ind_m3 = sum(ind_m3)
  ) %>%
  mutate(
    .by     = c(site, date_month),
    total   = sum(ind_m3),
    percent = ind_m3 / total
  ) %>%
  mutate(
    taxa_level = fct_reorder(taxa_level, percent, .fun = max),
    date_month2 = fct_reorder(format(date_month, "%b %Y"), date_month)
  ) %>%
  ggplot(
    aes(x = date_month2, 
        y = percent, 
        fill  = taxa_level, 
        color = after_scale(prismatic::clr_darken(fill, 0.3))
        )
         ) +
  geom_col() +
  labs(
    y = NULL,
    x = NULL,
    fill  = "Taxa Name",
    title = glue("`{const$taxa_lvl[1]}` for Cruise for Station {const$site} (mesh size {const$mesh})")
  ) +
  scale_y_continuous(
    expand = c(0, 0),
    labels = scales::label_percent()
  ) +
  scale_fill_viridis_d(option = "A") +
  guides(fill = guide_legend(ncol = 2, byrow = TRUE)) +
  theme_classic() +
  theme(
    legend.box.background = element_rect(color = "grey"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )

```



# 7.0 Plot All Stations 

## 7.1 200 Î¼m

```{r mesh-200}
#| echo: false
dat_lowest_200 <-
  dat %>%
  filter(
    mesh == 200 # mesh size
    & is.na(lifeStage) # assumed na is adult
  ) %>%
  mutate(
    site = fct(site, c("MR", "LK", "WS")),
    station = fct(station, c("Molasses Reef", "Looe Key (deep)", "Western Sambo")),
    # select the lowest taxa name available
    taxa_level = pmap(
      across(c(const$taxa_lvl)),
      incld_lvl = FALSE,
      taxa_func
    ),
  ) %>%
  unnest(taxa_level) %T>%
  print()
```


```{r plot-stations-200}
#| echo: false
dat_lowest_200 %>%
    summarise(
    .by = c(station, site, year, date_month, taxa_level),
    # ind_m3 = mean(ind_m3)
    ind_m3 = sum(ind_m3)
  ) %>%
  mutate(
    .by     = c(site, date_month),
    total   = sum(ind_m3),
    percent = ind_m3 / total
  ) %>%
  mutate(
    taxa_level = fct_reorder(taxa_level, percent, .fun = mean),
    date_month2 = fct_reorder(format(date_month, "%b %Y"), date_month)
  ) %>%
  filter(total < 85000) %T>% 
  print() %>%
  ggplot(
    aes(x = date_month2, y = percent, fill = taxa_level, 
        color = after_scale(prismatic::clr_darken(fill, 0.3))
        )
         ) +
  geom_col() +
  geom_point(aes(y = total / 20000), color = "red", fill = "white", shape = 21) +
  geom_hline(yintercept = -0.005, linewidth = rel(1)) +
  labs(
    y = NULL,
    x = NULL,
    fill = str_to_sentence(const$taxa_lvl),
    title = NULL
  ) +
  scale_y_continuous(
    # limits = c(0, 1.1),
    expand = c(0, 0),
    labels = scales::label_percent(),
     sec.axis = sec_axis(transform = ~ .x * 20000, 
                         name = expression(paste("# Individual m")^-3)
                         )
  ) +
  scale_fill_viridis_d(option = "A") +
  guides(fill = guide_legend(ncol = 1, byrow = TRUE)) +
  theme_classic() +
  facet_wrap(~station, ncol = 1, strip.position = "top") +
  theme(
    legend.box.background = element_rect(color = "grey"),
    axis.text.x = element_text(angle = 45, hjust = 1),
    axis.line.x.bottom = element_blank(),
    axis.text.y.right     = element_text(color = "red"),
    axis.title.y.right    = element_text(color = "red"),
    axis.ticks.y.right    = element_line(color = "red")
  ) 
```
```{r total-biomass-200}
#| echo: false
dat_lowest_200 %>%
    summarise(
    .by = c(station, site, year, date_month, taxa_level),
    # ind_m3 = mean(ind_m3)
    ind_m3 = sum(ind_m3)
  ) %>%
  mutate(
    .by     = c(site, date_month),
    total   = sum(ind_m3),
    percent = ind_m3 / total
  ) %>%
  mutate(
    taxa_level = fct_reorder(taxa_level, percent, .fun = max),
    date_month2 = fct_reorder(format(date_month, "%b %Y"), date_month)
  ) %>%
  filter(total < 85000) %>%
  ggplot(
    aes(x = date_month2, y = ind_m3, fill = taxa_level, 
        color = after_scale(prismatic::clr_darken(fill, 0.3))
        )
         ) +
  geom_col() +
  geom_hline(yintercept = -0.005, linewidth = rel(1)) +
  labs(
    y = NULL,
    x = "Year",
    fill  = const$taxa_lvl,
    title = NULL
  ) +
  scale_y_continuous(
    expand = c(0, 0)
  ) +
  scale_fill_viridis_d(option = "A") +
  guides(fill = guide_legend(ncol = 1, byrow = TRUE)) +
  theme_classic() +
  theme(
    legend.box.background = element_rect(color = "grey"),
    axis.text.x = element_text(angle = 45, hjust = 1),
    axis.line.x.bottom = element_blank(),
  ) +
  facet_wrap(~station, ncol = 1)
```


## 7.2 500 Î¼m

```{r mesh-500}
#| echo: false
dat_lowest_500 <-
  dat %>%
  filter(
    !str_detect(site, "9B") # site
    # str_detect(site, const$site) # site
    & mesh == 500 # mesh size
    & is.na(lifeStage) # assumed na is adult
  ) %>%
  mutate(
    site = fct(site, c("MR", "LK", "WS")),
    station = fct(station, c("Molasses Reef", "Looe Key (deep)", "Western Sambo")),
    # select the lowest taxa name available
    taxa_level = pmap(
      across(c(const$taxa_lvl)),
      incld_lvl = FALSE,
      taxa_func
    ),
  ) %>%
  unnest(taxa_level) %T>%
  print() 
```




```{r plot-station-500}
#| echo: false
dat_lowest_500 %>%
  summarise(
    .by = c(station, site, year, date_month, taxa_level),
    # ind_m3 = mean(ind_m3)
    ind_m3 = sum(ind_m3)
  ) %>%
  mutate(
    .by     = c(site, date_month),
    total   = sum(ind_m3),
    percent = ind_m3 / total
  ) %>%
  mutate(
    taxa_level  = fct_reorder(taxa_level, percent, .fun = max),
    date_month2 = fct_reorder(format(date_month, "%b %Y"), date_month)
  ) %>%
  ggplot(
    aes(
      x = date_month2, y = percent, fill = taxa_level,
      color = after_scale(prismatic::clr_darken(fill, 0.3))
    )
  ) +
  geom_col() +
  # geom_point(aes(y = (total / 1000)), color = "red", fill = "white", shape = 21) +
  # geom_point(aes(y = (total / 1000)), color = "#B300FF", fill = "white", shape = 21) +
  geom_point(aes(y = (total / 5000)), color = "#F200D1", fill = "white", shape = 21) +
  geom_hline(yintercept = -0.005, linewidth = rel(1)) +
  labs(
    y = NULL,
    x = NULL,
    fill  = str_to_sentence(const$taxa_lvl),
    title = NULL
  ) +
  scale_y_continuous(
    limits = c(0, 1),
    expand   = c(0, 0),
    labels   = scales::label_percent(),
    sec.axis = sec_axis(transform = ~ .x * 5000, 
                        name = expression(paste("# Individual m")^-3)
                        )
  ) +
  scale_fill_viridis_d(option = "A") +
  guides(fill = guide_legend(ncol = 1, byrow = TRUE)) +
  theme_classic() +
  facet_wrap(~station, ncol = 1) +
  theme(
    legend.box.background = element_rect(color = "grey"),
    axis.text.x           = element_text(angle = 45, hjust = 1),
    axis.line.x.bottom    = element_blank(),
    axis.line.x.top       = element_line(color = "black", linewidth = rel(1)),
    # axis.text.y.right     = element_text(color = "red"),
    # axis.title.y.right    = element_text(color = "red"),
    # axis.ticks.y.right    = element_line(color = "red")
    axis.text.y.right     = element_text(color = "#F200D1"),
    axis.title.y.right    = element_text(color = "#F200D1"),
    axis.ticks.y.right    = element_line(color = "#F200D1")
  )
```

```{r total-biomass-500}
#| echo: false
dat_lowest_500 %>%
    summarise(
    .by = c(station, site, year, date_month, taxa_level),
    # ind_m3 = mean(ind_m3)
    ind_m3 = sum(ind_m3)
  ) %>%
  mutate(
    .by     = c(site, date_month),
    total   = sum(ind_m3),
    percent = ind_m3 / total
  ) %>%
  mutate(
    taxa_level  = fct_reorder(taxa_level, percent, .fun = max),
    date_month2 = fct_reorder(format(date_month, "%b %Y"), date_month)
  ) %>%
  ggplot(
    aes(x = date_month2, 
        y = ind_m3, 
        fill = taxa_level, 
        color = after_scale(prismatic::clr_darken(fill, 0.3))
        )
         ) +
  geom_col() +
  labs(
    y = NULL,
    x = "Year",
    fill  = const$taxa_lvl,
    title = NULL
  ) +
  scale_y_continuous(
    expand = c(0, 0)
  ) +
  scale_fill_viridis_d(option = "A") +
  guides(fill = guide_legend(ncol = 1, byrow = TRUE)) +
  theme_classic() +
  theme(
    legend.box.background = element_rect(color = "grey"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  facet_wrap(~station, ncol = 1)
```

## 7.3 Both

```{r mesh-both}
#| echo: false
dat_lowest_both <-
  dat %>%
  filter(
    !str_detect(site, "9B|57") # site
    & (mesh == 500 | mesh == 200) 
    & is.na(lifeStage)      # assumed na is adult
  )  %>% 
  mutate(
    site = fct(site, c("MR", "LK", "WS")),
    station = fct(station, c("Molasses Reef", "Looe Key (deep)", "Western Sambo")), 
    # select the lowest taxa name available
    taxa_level = pmap(
      across(c(const$taxa_lvl)),
      incld_lvl = FALSE,
      taxa_func
    ),
  ) %>%
  unnest(taxa_level) %>%
  summarise(
    .by = c(station, site, mesh, year, date_month, taxa_level),
    # ind_m3 = mean(ind_m3)
    ind_m3 = sum(ind_m3)
  ) %>%
  mutate(
    .by     = c(site, mesh, date_month),
    total   = sum(ind_m3),
    percent = ind_m3 / total
  ) %>%
  mutate(
    taxa_level  = fct_reorder(taxa_level, percent, .fun = max),
    date_month2 = fct_reorder(format(date_month, "%b %Y"), date_month)
  ) %T>%
  print() 
```

```{r plot-stations-both}
#| echo: false
dat_lowest_both %>%
  filter(mesh == 200) %>%
  ggplot(
    aes(x = date_month2, y = percent, fill = taxa_level, 
        color = after_scale(prismatic::clr_darken(fill, 0.3))
        )
         ) +
  geom_col() +
  geom_point(aes(y = (total / 10000)), color = "black", fill = "white", shape = 21) +
  geom_hline(yintercept = -0.005, linewidth = rel(1)) +
  labs(
    y = NULL,
    x = NULL,
    fill = str_to_sentence(const$taxa_lvl),
    title = NULL
  ) +
  scale_y_continuous(
    expand = c(0, 0),
    labels = scales::label_percent(),
    sec.axis = sec_axis(transform = ~ .x * 10000,
                        name = expression(paste("# Individual m")^-3)
                        )
  ) +
  scale_fill_viridis_d(option = "A",
                       drop = FALSE) +
  scale_x_discrete(drop = FALSE) +
  guides(fill = guide_legend(ncol = 1, reverse = TRUE)) +
  theme_classic() +
  facet_grid(station~mesh) +
  theme(
    legend.box.background = element_rect(color = "grey"),
    axis.text.x           = element_text(angle = 45, hjust = 1),
    # axis.text.y.right     = element_text(margin = margin(l = 10, r = 10)),
    panel.spacing.y       = unit(0.75, "lines"),
    panel.spacing.x       = unit(0.75, "lines"),
    axis.line.x.bottom    = element_blank(),
  ) 

dat_lowest_both %>%
  filter(mesh == 500) %>%
  ggplot(
    aes(x = date_month2, y = percent, fill = taxa_level, 
        color = after_scale(prismatic::clr_darken(fill, 0.3))
        )
         ) +
  geom_col() +
  geom_point(aes(y = (total / 1000)), color = "black", fill = "white", shape = 21) +
  geom_hline(yintercept = -0.005, linewidth = rel(1)) +
  labs(
    y = NULL,
    x = NULL,
    fill = str_to_sentence(const$taxa_lvl),
    title = NULL
  ) +
  scale_y_continuous(
    expand = c(0, 0),
    labels = scales::label_percent(),
    sec.axis = sec_axis(transform = ~ .x * 1000,
                        name = expression(paste("# Individual m")^-3)
                        )
  ) +
  scale_fill_viridis_d(option = "A",
                       drop = FALSE) +
  scale_x_discrete(drop = FALSE) +
  guides(fill = guide_legend(ncol = 1, reverse = TRUE)) +
  theme_classic() +
  facet_grid(station~mesh) +
  theme(
    legend.box.background = element_rect(color = "grey"),
    axis.text.x           = element_text(angle = 45, hjust = 1),
    panel.spacing.y       = unit(0.75, "lines"),
    panel.spacing.x       = unit(0.75, "lines"),
    axis.line.x.bottom    = element_blank(),
  ) 
```


# 8.0 Copepod

```{r constant-copepod}
#| echo: false
const_cope <- list(
  taxa_lvl = "order", # lowest taxa level
  mesh     = 200,      # mesh size
  site     = "WS"      # site
)

# order of taxonomic classification
taxa_tree <- 
  c("kingdom", "phylum", "class", "order", "family", "genus", "scientificname") %>%
  rev()

# set lowest level
const_cope$taxa_lvl <- taxa_tree[which(taxa_tree == const_cope$taxa_lvl):length(taxa_tree)]

const_cope
```


```{r data-copepod}
#| echo: false
dat_cope <- 
  dat %>%
  filter(
    str_detect(class, "Copepoda")
    & !str_detect(site, "9B|57")  # site
    & (mesh == 500 | mesh == 200) # mesh size
    & is.na(lifeStage)            # assumed na is adult
  ) %>% 
  mutate(
    site = fct(site, c("MR", "LK", "WS")),
    station = fct(station, c("Molasses Reef", "Looe Key (deep)", "Western Sambo")), 
    # select the lowest taxa name available
    taxa_level = pmap(
      across(c(const_cope$taxa_lvl)),
      # incld_lvl = FALSE,
      taxa_func
    ),
  ) %>%
  unnest(taxa_level) %>%
  summarise(
    .by = c(station, site, mesh, year, date_month, taxa_level),
    # ind_m3 = mean(ind_m3)
    ind_m3 = sum(ind_m3)
  ) %>%
  mutate(
    .by     = c(site, mesh, date_month),
    total   = sum(ind_m3),
    percent = ind_m3 / total
  ) %>%
  mutate(
    taxa_level  = fct_reorder(taxa_level, percent, .fun = max),
    date_month2 = fct_reorder(format(date_month, "%b %Y"), date_month)
  ) %T>%
  print() 
```

```{r plot-copepod}
#| echo: false
dat_cope %>%
  # filter(mesh == 200) %>%
  ggplot(
    aes(x = date_month2, y = percent, fill = taxa_level, 
        color = after_scale(prismatic::clr_darken(fill, 0.3))
        )
         ) +
  geom_col() +
  # geom_point(aes(y = (total / 10000)), color = "black", fill = "white", shape = 21) +
  geom_hline(yintercept = -0.005, linewidth = rel(1)) +
  labs(
    y = NULL,
    x = NULL,
    fill = str_to_sentence(const_cope$taxa_lvl),
    title = NULL
  ) +
  scale_y_continuous(
    expand = c(0, 0),
    labels = scales::label_percent(),
    # sec.axis = sec_axis(transform = ~ .x * 10000)
  ) +
  scale_fill_viridis_d(option = "A",
                       drop = FALSE) +
  scale_x_discrete(drop = FALSE) +
  guides(fill = guide_legend(reverse = TRUE)) +
  theme_classic() +
  facet_grid(station~mesh) +
  theme(
    legend.box.background = element_rect(color = "grey"),
    legend.position = "top",
    axis.text.x           = element_text(angle = 45, hjust = 1),
    panel.spacing.y       = unit(0.75, "lines"),
    panel.spacing.x       = unit(0.75, "lines"),
    axis.line.x.bottom    = element_blank(),
    strip.text.y = element_text(size = rel(0.75))
  ) 
```

